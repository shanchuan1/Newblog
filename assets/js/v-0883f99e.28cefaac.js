"use strict";(self.webpackChunkblog_demo=self.webpackChunkblog_demo||[]).push([[321],{5178:(l,i,e)=>{e.r(i),e.d(i,{data:()=>t});const t={key:"v-0883f99e",path:"/interview.html",title:"前端面试题库(个人)",lang:"zh-CN",frontmatter:{stick:!0,categories:["前端面试题"],coverUrl:"https://images.pexels.com/photos/55821/pyrenees-mountains-snow-zenith-55821.jpeg",date:"2022/5/11 23:59"},excerpt:"",headers:[{level:2,title:"基础决定上限，观察看学习能力，代码书写风格",slug:"基础决定上限-观察看学习能力-代码书写风格",children:[{level:3,title:"HTML 与 DOM 基础",slug:"html-与-dom-基础",children:[]},{level:3,title:"CSS",slug:"css",children:[]},{level:3,title:"JS",slug:"js",children:[]},{level:3,title:"前端框架",slug:"前端框架",children:[]},{level:3,title:"React",slug:"react",children:[]},{level:3,title:"React Native",slug:"react-native",children:[]},{level:3,title:"VUE",slug:"vue",children:[]},{level:3,title:"Node",slug:"node",children:[]},{level:3,title:"开发工具",slug:"开发工具",children:[]}]}],git:{updatedTime:null,contributors:[]}}},2355:(l,i,e)=>{e.r(i),e.d(i,{default:()=>r});const t=(0,e(6252).uE)('<h1 id="前端面试题库-个人" tabindex="-1"><a class="header-anchor" href="#前端面试题库-个人" aria-hidden="true">#</a> 前端面试题库(个人)</h1><h2 id="基础决定上限-观察看学习能力-代码书写风格" tabindex="-1"><a class="header-anchor" href="#基础决定上限-观察看学习能力-代码书写风格" aria-hidden="true">#</a> 基础决定上限，观察看学习能力，代码书写风格</h2><h3 id="html-与-dom-基础" tabindex="-1"><a class="header-anchor" href="#html-与-dom-基础" aria-hidden="true">#</a> HTML 与 DOM 基础</h3><ol><li><p><code>&lt;b&gt;</code> 标签和 css 的 font-weight: bold 属性有什么区别</p></li><li><p>简述一下你对HTML语义化的理解？</p><ul><li>把 HTML 的元素标签，属性都写的有意义，并且使用 HTML5 标准的语义化标签</li></ul></li><li><p>iframe有那些缺点？</p><ul><li>iframe会阻塞主页面的Onload事件； 搜索引擎的检索程序无法解读这种页面，不利于SEO; iframe和主页面共享连接池，而浏览器对相同域的连接有限制，所以会影响页面的并行加载。 使用iframe之前需要考虑这两个缺点。 如果需要使用iframe，最好是通过javascript动态给iframe添加src属性值，这样可以绕开以上两个问题。</li></ul></li><li><p>如何实现浏览器内多个标签页之间的通信?</p><ul><li>window.addEventListener(‘storage’, (e) =&gt; console.log(e)),onstorage以及storage事件，针对都是非当前页面对 localStorage进行修改时才会触发，当前页面修改localStorage不会触发监听函数。</li></ul></li><li><p>webSocket如何兼容低浏览器？</p></li><li><p>title与h1的区别、b与strong的区别、i与em的区别？</p></li><li><p>浏览器如何解析文档结构</p></li><li><p>HTML 解析过程中遇到 script 标签会怎么样</p><ul><li>停止解析DOM树并且开始下载js，因为 js 可能会改变现有 html 结构，所以是阻塞资源</li><li>可以使用 async 或者 defer 实现异步加载 js，这样不会阻塞 DOM 解析</li></ul></li><li><p>如何优化页面的加载速度</p></li><li><p>跨域 CORS 的原理是什么</p></li><li><p>JSON-P 是什么</p><ul><li>JSON-P 和 JSON 的性能区别是什么</li></ul></li><li><p>设置缓存的方式</p><ul><li>服务器设置 expire 的 http 头信息</li><li>客户端缓存</li><li>缓存 Ajax 请求必须使用 GET 的方式</li></ul></li><li><p>XSS 和 CSRF 的区别以及原理</p></li><li><p>正则表达式的工作原理</p><ul><li>JS 解析器遇到表达式时会将其编译成原生代码，所以需要把表达式写成字面量</li></ul></li></ol><h3 id="css" tabindex="-1"><a class="header-anchor" href="#css" aria-hidden="true">#</a> CSS</h3><ul><li>写动画的时候需要注意什么</li><li>介绍一下标准的CSS的盒子模型？低版本IE的盒子模型有什么不同的？</li><li>CSS优先级算法如何计算？</li><li>请解释一下CSS3的Flexbox（弹性盒布局模型）,以及适用场景？</li><li>使用 CSS 预处理器吗？喜欢那个？</li><li>CSS优化、提高性能的方法有哪些？</li><li>浏览器是怎样解析CSS选择器的？</li><li>抽离样式模块怎么写，说出思路，有无实践经验？</li><li>元素竖向的百分比设定是相对于容器的高度吗？</li><li>你对line-height是如何理解的？</li><li>让页面里的字体变清晰，变细用CSS怎么做？（-webkit-font-smoothing: antialiased;）</li><li>如果需要手动写动画，你认为最小时间间隔是多久，为什么？</li><li>overflow: scroll时不能平滑滚动的问题怎么处理？</li><li>style标签写在body后与body前有什么区别？</li><li>rem布局的优缺点</li></ul><h3 id="js" tabindex="-1"><a class="header-anchor" href="#js" aria-hidden="true">#</a> JS</h3><ul><li>介绍JavaScript的基本数据类型。</li><li>说说写JavaScript的基本规范？</li><li>Javascript如何实现继承？</li><li>JavaScript有几种类型的值？（堆：原始数据类型和 栈：引用数据类型），你能画一下他们的内存图吗？</li><li>什么是window对象? 什么是document对象?</li><li>什么是闭包（closure），为什么要用它？</li><li>.call() 和 .apply() 的作用和区别，bind 又是做什么的？</li><li>new操作符具体干了什么呢?</li><li>那些操作会造成内存泄漏？</li><li>Javascript中，有一个函数，执行时对象查找时，永远不会去查找原型，这个函数是？ <ul><li>hasOwnProperty</li><li>JS 对象分为自身属性与继承属性</li></ul></li><li>对JSON的了解？</li><li>关于事件，IE与火狐的事件机制有什么区别？ 如何阻止冒泡？</li><li>null，undefined的区别？</li><li>JavaScript 原型，原型链 ? 有什么特点？</li><li>同步和异步的区别?</li><li>模块化开发怎么做？</li><li>如何做数据的状态管理</li><li>DOM 操作为什么这么慢 <ul><li>getElementByXX 和 querySelector 的区别是什么</li></ul></li><li>JS 代码最优运行时间是多少</li><li>为什么需要使用 JS 的事件代理功能</li><li>JS Bridge 的原理</li><li>EventLoop 是什么</li><li>作用域链是什么 <ul><li>JS 引擎如何解析标识符的，例如 this window 和其它</li><li>如何达到最高的作用域链的效率</li></ul></li><li>JS 的 JIT 是什么</li></ul><h3 id="前端框架" tabindex="-1"><a class="header-anchor" href="#前端框架" aria-hidden="true">#</a> 前端框架</h3><h3 id="react" tabindex="-1"><a class="header-anchor" href="#react" aria-hidden="true">#</a> React</h3><ul><li><p>React 的应用场景</p></li><li><p>描述一下React 生命周期</p></li><li><p>为什么循环产生的组件中要利用上key这个特殊的prop？</p></li><li><p>React-router 路由的实现原理？</p></li><li><p>受控组件(Controlled Component)与非受控组件* (Uncontrolled Component)的区别</p></li><li><p>React为什么自己定义一套事件体系呢，与浏览器原生事件体系有什么关系？</p></li><li><p>什么时候应该选择用class实现一个组件，什么时候用一个函数实现一个组件？</p></li><li><p>什么是HoC（Higher-Order Component）？适用于什么场景？</p></li><li><p>并不是父子关系的组件，如何实现相互的数据通信？</p><ul><li>父组件的 state</li><li>context</li><li>eventEmitter</li><li>redux，比较复杂</li></ul></li><li><p>setState 调用后发生了什么</p><ol><li><p>getInitialState，componentWillMount，render，componentWillUpdate 中setState都不会引起updateComponent。但在componentDidMount和componentDidUpdate中则会。</p></li><li><p>直接调用this.setState()</p><ul><li>因为在整个生命周期中就是一个事物操作,所以标识位isBatchingUpdates = true,所以流程到了enqueueUpdate()时,实例对象都会加入到dirtyComponents 数组中</li><li>接着执行componentWillMount()</li><li>将所有的setState操作进行合并(相同的操作合并成一个)</li><li>渲染</li><li>执行componentDidMount()</li><li>事物结束,调用close方法-&gt;调用runBatchUpdate()</li><li>继续走更新流程</li></ul></li><li><p>使用setTimeout()方法调用</p><ul><li>setTimeout()没在事物中 isBatchingUpdates = false 所以就直接走直接更新操作</li></ul></li></ol></li><li><p>virtual DOM 是什么</p></li><li><p>为什么会出现virtual DOM</p></li><li><p>diff 算法是什么</p><ul><li>React 的 3 个 diff 结构</li></ul></li><li><p>React与Vue，各自的组件更新进行对比，它们有哪些区别？</p><ul><li>React 使用 state，VUE 使用 watcher</li></ul></li><li><p>React Native 的底层实现</p><ul><li>android 使用 webkit 解析 js</li><li>iOS 使用 JavaScript-core 解析 js</li></ul></li></ul><h3 id="react-native" tabindex="-1"><a class="header-anchor" href="#react-native" aria-hidden="true">#</a> React Native</h3><ul><li>js bridge 是什么</li></ul><h3 id="vue" tabindex="-1"><a class="header-anchor" href="#vue" aria-hidden="true">#</a> VUE</h3><ol><li>VUE 的应用场景</li><li>VUE 的数据绑定过程 <ul><li>把 Vue 的实例中的 data 对象，通过 defineProperty 设置 getter 和 setter，在 setter 中设置 watcher 监听对应的对象的变化</li></ul></li></ol><h3 id="node" tabindex="-1"><a class="header-anchor" href="#node" aria-hidden="true">#</a> Node</h3><ul><li>Node 的运作原理 <ul><li>模块加载</li><li>JS 模块与 C 模块的交互</li><li>Node 的异步机制</li><li>Node 的异步 I/O 原理</li><li>Node 是单线程吗？</li><li>Node 的 V8 内存限制，以及如何突破内存限制</li><li>Buffer 对象是什么</li><li>如何处理异常</li><li>如何启用多线程</li></ul></li></ul><h3 id="开发工具" tabindex="-1"><a class="header-anchor" href="#开发工具" aria-hidden="true">#</a> 开发工具</h3><ol><li>使用什么开发工具</li><li>搭建的开发环境问题 <ul><li>团队如何搭建开发环境</li></ul></li></ol>',19),a={},r=(0,e(3744).Z)(a,[["render",function(l,i){return t}]])}}]);